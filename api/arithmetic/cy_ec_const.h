/**********************************************************************************/
/* Copyright (C) 2022 - Renaud Dubois
 */
/* This file is part of cy_lib project
 */
/* License: This software is licensed under a dual BSD and GPL v2 license.
 */
/* See LICENSE file at the root folder of the project.
 */
/* FILE: cy_ec_const.h
 */
/* 																			      */
/* 																			      */
/* DESCRIPTION: elliptic curves constants */
/* Acknowledgment: those constants from known curves file are mainly copied
 * from the cx.ec file of speculos project */
/**********************************************************************************/

#ifndef CY_EC_CONST_H_
#define CY_EC_CONST_H_

#include "cy_configuration.h"

#ifdef _FP_BOLOS_BURRITOS
#define _ENABLE_ALL
#endif

/** List of supported elliptic curves */
enum cy_testcurve_e {
  CY_CURVE_NONE,

  /* ------------------------ */
  /* --- Type Weierstrass --- */
  /* ------------------------ */
  /** Low limit (not included) of Weierstrass curve ID */
  CY_CURVE_WEIERSTRASS_START = 0x20,

  /** Secp.org */
  CY_CURVE_SECP256K1 = 0x21,

  CY_CURVE_SECP256R1 = 0x22,
#define CY_CURVE_256R1    CY_CURVE_SECP256R1
#define CY_CURVE_NISTP256 CY_CURVE_SECP256R1

  CY_CURVE_SECP384R1 = 0x23,
#define CY_CURVE_NISTP384 CY_CURVE_SECP384R1

  CY_CURVE_SECP521R1 = 0x24,
#define CY_CURVE_NISTP521 CY_CURVE_SECP521R1

  /** BrainpoolP256t1 */
  CY_CURVE_BrainPoolP256T1 = 0x31,

  /** BrainpoolP256r1 */
  CY_CURVE_BrainPoolP256R1 = 0x32,

  /** BrainpoolP320t1 */
  CY_CURVE_BrainPoolP320T1 = 0x33,

  /** BrainpoolP320r1 */
  CY_CURVE_BrainPoolP320R1 = 0x34,

  /** BrainpoolP384t1 */
  CY_CURVE_BrainPoolP384T1 = 0x35,

  /** Brainpool384r1 */
  CY_CURVE_BrainPoolP384R1 = 0x36,

  /** BrainpoolP512t1 */
  CY_CURVE_BrainPoolP512T1 = 0x37,

  /** BrainpoolP512r1 */
  CY_CURVE_BrainPoolP512R1 = 0x38,

  CY_CURVE_BLS12_381_G1 = 0x39,

  /** Stark */
  CY_CURVE_Stark256 = 0x51,

  /** High limit (not included) of Weierstrass curve ID */
  CY_CURVE_WEIERSTRASS_END = 0x6F,

  /* ---------------------------- */
  /* --- Type Twister Edwards --- */
  /* ---------------------------- */
  /** Low limit (not included) of  Twister Edwards curve ID */
  CY_CURVE_TWISTED_EDWARDS_START = 0x70,

  /** Ed25519 curve */
  CY_CURVE_Ed25519 = 0x71,

  CY_CURVE_Ed448 = 0x72,

  CY_CURVE_TWISTED_EDWARDS_END = 0x7F,
  /** High limit (not included) of Twister Edwards  curve ID */

  /* ----------------------- */
  /* --- Type Montgomery --- */
  /* ----------------------- */
  /** Low limit (not included) of Montgomery curve ID */
  CY_CURVE_MONTGOMERY_START = 0x80,

  /** Curve25519 curve */
  CY_CURVE_Curve25519 = 0x81,
  CY_CURVE_Curve448 = 0x82,

  CY_CURVE_MONTGOMERY_END = 0x8F

  /** High limit (not included) of Montgomery curve ID */
};


#define CY_TESTVEC_HEADER                                                        \
  /** Curve Identifier. See #cx_curve_e */                                     \
  int curve;                                                            \
  /** Curve size in bits */                                                    \
  unsigned int bit_size;                                                       \
  /** component length in bytes */                                             \
  unsigned int length;                                                         \
  /**  a coef */                                                               \
  const uint8_t *a;                                                            \
  /**  b/d coef */                                                             \
  const uint8_t *b;                                                            \
  /** Curve field */                                                           \
  const uint8_t *p;                                                            \
  /** Point Generator x coordinate */                                          \
  const uint8_t *Gx;                                                           \
  /** Point Generator y coordinate */                                          \
  const uint8_t *Gy;                                                           \
  /** Curve order */                                                           \
  const uint8_t *n;                                                            \
  /**  cofactor */                                                             \
  int h;                                                            \
  /** @internal 2nd Montgomery constant for Curve order */                     \
  const uint8_t *Hn;                                                           \
  /** @internal 2nd Montgomery constant for Field */                           \
  const uint8_t *Hp;\
/** @internal 1st Montgomery constant for 128 bits interger for Field */                           \
  const uint8_t *P0_128; \
  const uint8_t *t8_size; \
  char *curve_name;



struct cx_testvec_weierstrass_s {
	CY_TESTVEC_HEADER
};
typedef struct cx_testvec_weierstrass_s cx_testvec_weierstrass_t;

struct cx_testvec_twisted_edwards_s {
	CY_TESTVEC_HEADER
};

typedef struct cx_testvec_twisted_edwards_s cx_testvec_twisted_edwards_t;




#define _SEC256K1_ENABLED

#define C_cofactor_1 1
#define C_cofactor_4 4
#define C_cofactor_8 8

#ifdef _ENABLE_ALL
#define _SEC256K1_ENABLED //enabling bitcoin famous sec256k1 curve
#define _BLS12381_ENABLED //enabling pairing friendly BLS12_381 curve
#define _SECP_ALL_ENABLED //enabling all NIST secP curves
#define _BRAINPOOL_ALL_ENABLED //enabling all brainpool curves
#define _STARK_ENABLED //enabling sparse stark friendly curve
#endif

#ifdef _SEC256K1_ENABLED


#define SEC256K1_SIZE_u8 32


static unsigned char const C_cy_secp256k1_a[] = {
  // a:  0x00
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static unsigned char const C_cy_secp256k1_b[] = {
  // b:  0x07
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07
};

/* -1 is not a square root of this field */
static unsigned char const C_cy_secp256k1_p[] = {
  // p:  0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f
};
static unsigned char const C_cy_secp256k1_Hp[] = {
  // Hp: 0x000000000000000000000000000000000000000000000001000007a2000e90a1
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x07, 0xa2, 0x00, 0x0e, 0x90, 0xa1
};
static unsigned char const C_cy_secp256k1_Gx[] = {
  // Gx: 0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798
  0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62,
  0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce,
  0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98
};
static unsigned char const C_cy_secp256k1_Gy[] = {
  // Gy:  0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8
  0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb,
  0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85,
  0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8
};
static unsigned char const C_cy_secp256k1_n[] = {
  // n: 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48,
  0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41
};
static unsigned char const C_cy_secp256k1_Hn[] = {
  // Hn:0x9d671cd581c69bc5e697f5e45bcd07c6741496c20e7cf878896cf21467d7d140
  0x9d, 0x67, 0x1c, 0xd5, 0x81, 0xc6, 0x9b, 0xc5, 0xe6, 0x97, 0xf5,
  0xe4, 0x5b, 0xcd, 0x07, 0xc6, 0x74, 0x14, 0x96, 0xc2, 0x0e, 0x7c,
  0xf8, 0x78, 0x89, 0x6c, 0xf2, 0x14, 0x67, 0xd7, 0xd1, 0x40
};

#define C_cy_secp256k1_h C_cofactor_1

static uint8_t const secp256k1_t8[] = { 32, 0, 0, 0, 0, 0, 0, 0 };
static char *const sec256k1_name="Curve sec256k1";

cx_testvec_weierstrass_t const C_cy_secp256k1 = {
  .curve = CY_CURVE_SECP256K1,
  .bit_size = 256,
  .length = 32,
  .a = C_cy_secp256k1_a,
  .b = C_cy_secp256k1_b,
  .p = C_cy_secp256k1_p,
  .Gx = C_cy_secp256k1_Gx,
  .Gy = C_cy_secp256k1_Gy,
  .n = C_cy_secp256k1_n,
  .h = C_cy_secp256k1_h,
  .Hp = C_cy_secp256k1_Hp,
  .Hn = C_cy_secp256k1_Hn,
  .t8_size=secp256k1_t8,
  .curve_name=sec256k1_name
};
#endif

#ifdef _BLS12381_ENABLED

#define BLS12_381_SIZE_u8 48
static uint8_t const C_cy_BLS12_381_G1_a[BLS12_381_SIZE_u8] = { 0 };
static uint8_t const C_cy_BLS12_381_G1_b[BLS12_381_SIZE_u8] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04
};
static uint8_t const C_cy_BLS12_381_G1_p[BLS12_381_SIZE_u8] = {
  0x1a, 0x01, 0x11, 0xea, 0x39, 0x7f, 0xe6, 0x9a, 0x4b, 0x1b, 0xa7, 0xb6,
  0x43, 0x4b, 0xac, 0xd7, 0x64, 0x77, 0x4b, 0x84, 0xf3, 0x85, 0x12, 0xbf,
  0x67, 0x30, 0xd2, 0xa0, 0xf6, 0xb0, 0xf6, 0x24, 0x1e, 0xab, 0xff, 0xfe,
  0xb1, 0x53, 0xff, 0xff, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xaa, 0xab
};
static uint8_t const C_cy_BLS12_381_G1_Hp[BLS12_381_SIZE_u8] = {
  0x11, 0x98, 0x8f, 0xe5, 0x92, 0xca, 0xe3, 0xaa, 0x9a, 0x79, 0x3e, 0x85,
  0xb5, 0x19, 0x95, 0x2d, 0x67, 0xeb, 0x88, 0xa9, 0x93, 0x9d, 0x83, 0xc0,
  0x8d, 0xe5, 0x47, 0x6c, 0x4c, 0x95, 0xb6, 0xd5, 0x0a, 0x76, 0xe6, 0xa6,
  0x09, 0xd1, 0x04, 0xf1, 0xf4, 0xdf, 0x1f, 0x34, 0x1c, 0x34, 0x17, 0x46
};
static uint8_t const C_cy_BLS12_381_G1_n[BLS12_381_SIZE_u8] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x73, 0xed, 0xa7, 0x53, 0x29, 0x9d, 0x7d, 0x48,
  0x33, 0x39, 0xd8, 0x08, 0x09, 0xa1, 0xd8, 0x05, 0x53, 0xbd, 0xa4, 0x02,
  0xff, 0xfe, 0x5b, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01
};
static uint8_t const C_cy_BLS12_381_G1_Hn[BLS12_381_SIZE_u8] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x6e, 0x2a, 0x5b, 0xb9, 0xc8, 0xdb, 0x33, 0xe9,
  0x73, 0xd1, 0x3c, 0x71, 0xc7, 0xb5, 0xf4, 0x18, 0x1b, 0x3e, 0x0d, 0x18,
  0x8c, 0xf0, 0x69, 0x90, 0xc6, 0x2c, 0x18, 0x07, 0x43, 0x9b, 0x73, 0xaf
};
static uint8_t const C_cy_BLS12_381_G1_Gx[BLS12_381_SIZE_u8] = {
  0x17, 0xf1, 0xd3, 0xa7, 0x31, 0x97, 0xd7, 0x94, 0x26, 0x95, 0x63, 0x8c,
  0x4f, 0xa9, 0xac, 0x0f, 0xc3, 0x68, 0x8c, 0x4f, 0x97, 0x74, 0xb9, 0x05,
  0xa1, 0x4e, 0x3a, 0x3f, 0x17, 0x1b, 0xac, 0x58, 0x6c, 0x55, 0xe8, 0x3f,
  0xf9, 0x7a, 0x1a, 0xef, 0xfb, 0x3a, 0xf0, 0x0a, 0xdb, 0x22, 0xc6, 0xbb
};
static uint8_t const C_cy_BLS12_381_G1_Gy[BLS12_381_SIZE_u8] = {
  0x08, 0xb3, 0xf4, 0x81, 0xe3, 0xaa, 0xa0, 0xf1, 0xa0, 0x9e, 0x30, 0xed,
  0x74, 0x1d, 0x8a, 0xe4, 0xfc, 0xf5, 0xe0, 0x95, 0xd5, 0xd0, 0x0a, 0xf6,
  0x00, 0xdb, 0x18, 0xcb, 0x2c, 0x04, 0xb3, 0xed, 0xd0, 0x3c, 0xc7, 0x44,
  0xa2, 0x88, 0x8a, 0xe4, 0x0c, 0xaa, 0x23, 0x29, 0x46, 0xc5, 0xe7, 0xe1
};

// The cofactor of BLS12-381 0x396c8c005555e1568c00aaab0000aaab
// TODO: write correct value (unused for now)
#define C_cy_BLS12_381_G1_h C_cofactor_1

static char *const bls12_381G1_name="Curve BLS12_381_G1";


static uint8_t const bls12_381G1_t8[] = { 48, 0, 0, 0, 0, 0, 0, 0 };

cx_testvec_weierstrass_t const C_cy_BLS12_381_G1 = { .curve =
                                                       CY_CURVE_BLS12_381_G1,
                                                   .bit_size = 381,
                                                   .length = 48,
                                                   .p = C_cy_BLS12_381_G1_p,
                                                   .Hp = C_cy_BLS12_381_G1_Hp,
                                                   .Gx = C_cy_BLS12_381_G1_Gx,
                                                   .Gy = C_cy_BLS12_381_G1_Gy,
                                                   .n = C_cy_BLS12_381_G1_n,
                                                   .Hn = C_cy_BLS12_381_G1_Hn,
                                                   .h = C_cy_BLS12_381_G1_h,
                                                   .a = C_cy_BLS12_381_G1_a,
                                                   .b = C_cy_BLS12_381_G1_b,
												   .t8_size=bls12_381G1_t8,
												    .curve_name=bls12_381G1_name};

#endif

#ifdef _SECP_ALL_ENABLED

static unsigned char const C_cy_secp256r1_a[] = {
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc
};
static unsigned char const C_cy_secp256r1_b[] = {
  0x5a, 0xc6, 0x35, 0xd8, 0xaa, 0x3a, 0x93, 0xe7, 0xb3, 0xeb, 0xbd,
  0x55, 0x76, 0x98, 0x86, 0xbc, 0x65, 0x1d, 0x06, 0xb0, 0xcc, 0x53,
  0xb0, 0xf6, 0x3b, 0xce, 0x3c, 0x3e, 0x27, 0xd2, 0x60, 0x4b
};
static unsigned char const C_cy_secp256r1_p[] = {
  // p:  0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
static unsigned char const C_cy_secp256r1_Hp[] = {
  // Hp: 0x00000004fffffffdfffffffffffffffefffffffbffffffff0000000000000003
  0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03
};
static unsigned char const C_cy_secp256r1_Gx[] = {
  0x6b, 0x17, 0xd1, 0xf2, 0xe1, 0x2c, 0x42, 0x47, 0xf8, 0xbc, 0xe6,
  0xe5, 0x63, 0xa4, 0x40, 0xf2, 0x77, 0x03, 0x7d, 0x81, 0x2d, 0xeb,
  0x33, 0xa0, 0xf4, 0xa1, 0x39, 0x45, 0xd8, 0x98, 0xc2, 0x96
};
static unsigned char const C_cy_secp256r1_Gy[] = {
  0x4f, 0xe3, 0x42, 0xe2, 0xfe, 0x1a, 0x7f, 0x9b, 0x8e, 0xe7, 0xeb,
  0x4a, 0x7c, 0x0f, 0x9e, 0x16, 0x2b, 0xce, 0x33, 0x57, 0x6b, 0x31,
  0x5e, 0xce, 0xcb, 0xb6, 0x40, 0x68, 0x37, 0xbf, 0x51, 0xf5
};
static unsigned char const C_cy_secp256r1_n[] = {
  // n:  0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbc, 0xe6, 0xfa, 0xad, 0xa7, 0x17,
  0x9e, 0x84, 0xf3, 0xb9, 0xca, 0xc2, 0xfc, 0x63, 0x25, 0x51
};
static unsigned char const C_cy_secp256r1_Hn[] = {
  // Hn: 0x66e12d94f3d956202845b2392b6bec594699799c49bd6fa683244c95be79eea2
  0x66, 0xe1, 0x2d, 0x94, 0xf3, 0xd9, 0x56, 0x20, 0x28, 0x45, 0xb2,
  0x39, 0x2b, 0x6b, 0xec, 0x59, 0x46, 0x99, 0x79, 0x9c, 0x49, 0xbd,
  0x6f, 0xa6, 0x83, 0x24, 0x4c, 0x95, 0xbe, 0x79, 0xee, 0xa2
};

#define C_cy_secp256r1_h C_cofactor_1

static uint8_t const secp256r1_t8[] = { 32, 0, 0, 0, 0, 0, 0, 0 };
static char *const sec256r1_name="Curve sec256r1";

cx_testvec_weierstrass_t const C_cy_secp256r1 = {
  .curve = CY_CURVE_SECP256R1,
  .bit_size = 256,
  .length = 32,

  .a = C_cy_secp256r1_a,
  .b = C_cy_secp256r1_b,
  .p = C_cy_secp256r1_p,
  .Gx = C_cy_secp256r1_Gx,
  .Gy = C_cy_secp256r1_Gy,
  .n = C_cy_secp256r1_n,
  .h = C_cy_secp256r1_h,
  .Hp = C_cy_secp256r1_Hp,
  .Hn = C_cy_secp256r1_Hn,
  .t8_size=secp256r1_t8,
   .curve_name=sec256r1_name
};

#define SEC384r1_SIZE_u8 48

static uint8_t const secp384r1_t8[] = { 48, 0, 0, 0, 0, 0, 0, 0 };

static uint8_t const C_cy_secp384r1_a[] = {
  // a:
  // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfc
};
static uint8_t const C_cy_secp384r1_b[] = {
  // b:
  0xB3, 0x31, 0x2F, 0xA7, 0xE2, 0x3E, 0xE7, 0xE4, 0x98, 0x8E, 0x05, 0x6B,
  0xE3, 0xF8, 0x2D, 0x19, 0x18, 0x1D, 0x9C, 0x6E, 0xFE, 0x81, 0x41, 0x12,
  0x03, 0x14, 0x08, 0x8F, 0x50, 0x13, 0x87, 0x5A, 0xC6, 0x56, 0x39, 0x8D,
  0x8A, 0x2E, 0xD1, 0x9D, 0x2A, 0x85, 0xC8, 0xED, 0xD3, 0xEC, 0x2A, 0xEF
};

/* -1 is not a square root of p*/
static uint8_t const C_cy_secp384r1_p[] = {
  // p:
  // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
};
static uint8_t const C_cy_secp384r1_Hp[] = {
  // Hp:
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x01
};
static uint8_t const C_cy_secp384r1_Gx[] = {
  0xAA, 0x87, 0xCA, 0x22, 0xBE, 0x8B, 0x05, 0x37, 0x8E, 0xB1, 0xC7, 0x1E,
  0xF3, 0x20, 0xAD, 0x74, 0x6E, 0x1D, 0x3B, 0x62, 0x8B, 0xA7, 0x9B, 0x98,
  0x59, 0xF7, 0x41, 0xE0, 0x82, 0x54, 0x2A, 0x38, 0x55, 0x02, 0xF2, 0x5D,
  0xBF, 0x55, 0x29, 0x6C, 0x3A, 0x54, 0x5E, 0x38, 0x72, 0x76, 0x0A, 0xB7
};
static uint8_t const C_cy_secp384r1_Gy[] = {
  0x36, 0x17, 0xDE, 0x4A, 0x96, 0x26, 0x2C, 0x6F, 0x5D, 0x9E, 0x98, 0xBF,
  0x92, 0x92, 0xDC, 0x29, 0xF8, 0xF4, 0x1D, 0xBD, 0x28, 0x9A, 0x14, 0x7C,
  0xE9, 0xDA, 0x31, 0x13, 0xB5, 0xF0, 0xB8, 0xC0, 0x0A, 0x60, 0xB1, 0xCE,
  0x1D, 0x7E, 0x81, 0x9D, 0x7A, 0x43, 0x1D, 0x7C, 0x90, 0xEA, 0x0E, 0x5F
};
static uint8_t const C_cy_secp384r1_n[] = {
  // n:
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xC7, 0x63, 0x4D, 0x81, 0xF4, 0x37, 0x2D, 0xDF, 0x58, 0x1A, 0x0D, 0xB2,
  0x48, 0xB0, 0xA7, 0x7A, 0xEC, 0xEC, 0x19, 0x6A, 0xCC, 0xC5, 0x29, 0x73
};
static uint8_t const C_cy_secp384r1_Hn[] = {
  // Hn:
  0x0c, 0x84, 0xee, 0x01, 0x2b, 0x39, 0xbf, 0x21, 0x3f, 0xb0, 0x5b, 0x7a,
  0x28, 0x26, 0x68, 0x95, 0xd4, 0x0d, 0x49, 0x17, 0x4a, 0xab, 0x1c, 0xc5,
  0xbc, 0x3e, 0x48, 0x3a, 0xfc, 0xb8, 0x29, 0x47, 0xff, 0x3d, 0x81, 0xe5,
  0xdf, 0x1a, 0xa4, 0x19, 0x2d, 0x31, 0x9b, 0x24, 0x19, 0xb4, 0x09, 0xa9
};

#define C_cy_secp384r1_h C_cofactor_1

//static uint8_t const * argv_sec384[] = { secp384r1_t8, C_cy_secp384r1_p };

static char *const sec384_name="Curve sec384r1";

cx_testvec_weierstrass_t const C_cy_secp384r1 = {
  .curve = CY_CURVE_SECP384R1,
  .bit_size = 384,
  .length = 48,

  .a = C_cy_secp384r1_a,
  .b = C_cy_secp384r1_b,
  .p = C_cy_secp384r1_p,
  .Gx = C_cy_secp384r1_Gx,
  .Gy = C_cy_secp384r1_Gy,
  .n = C_cy_secp384r1_n,
  .h = C_cy_secp384r1_h,
  .Hp = C_cy_secp384r1_Hp,
  .Hn = C_cy_secp384r1_Hn,
  .P0_128=NULL,
  .t8_size=secp384r1_t8,
  .curve_name=sec384_name,
};
#endif

#ifdef _BRAINPOOL_ALL_ENABLED

/* ------------------------------------------------------------------------ */
/* ---                            BrainpoolP256r1                       --- */
/* ------------------------------------------------------------------------ */

uint8_t const C_cy_BrainpoolP256r1_a[] = {
  // 0x7D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9
  0x7d, 0x5a, 0x09, 0x75, 0xfc, 0x2c, 0x30, 0x57, 0xee, 0xf6, 0x75,
  0x30, 0x41, 0x7a, 0xff, 0xe7, 0xfb, 0x80, 0x55, 0xc1, 0x26, 0xdc,
  0x5c, 0x6c, 0xe9, 0x4a, 0x4b, 0x44, 0xf3, 0x30, 0xb5, 0xd9
};
uint8_t const C_cy_BrainpoolP256r1_b[] = {
  // 0x26DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B6
  0x26, 0xdc, 0x5c, 0x6c, 0xe9, 0x4a, 0x4b, 0x44, 0xf3, 0x30, 0xb5,
  0xd9, 0xbb, 0xd7, 0x7c, 0xbf, 0x95, 0x84, 0x16, 0x29, 0x5c, 0xf7,
  0xe1, 0xce, 0x6b, 0xcc, 0xdc, 0x18, 0xff, 0x8c, 0x07, 0xb6
};
uint8_t const C_cy_BrainpoolP256r1_p[] = {
  // 0xA9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E5377
  0xa9, 0xfb, 0x57, 0xdb, 0xa1, 0xee, 0xa9, 0xbc, 0x3e, 0x66, 0x0a,
  0x90, 0x9d, 0x83, 0x8d, 0x72, 0x6e, 0x3b, 0xf6, 0x23, 0xd5, 0x26,
  0x20, 0x28, 0x20, 0x13, 0x48, 0x1d, 0x1f, 0x6e, 0x53, 0x77
};
uint8_t const C_cy_BrainpoolP256r1_Hp[] = {
  0x47, 0x17, 0xaa, 0x21, 0xe5, 0x95, 0x7f, 0xa8, 0xa1, 0xec, 0xda,
  0xcd, 0x6b, 0x1a, 0xc8, 0x07, 0x5c, 0xce, 0x4c, 0x26, 0x61, 0x4d,
  0x4f, 0x4d, 0x8c, 0xfe, 0xdf, 0x7b, 0xa6, 0x46, 0x5b, 0x6c
};
uint8_t const C_cy_BrainpoolP256r1_Gx[] = {
  // 0x8BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262
  0x8b, 0xd2, 0xae, 0xb9, 0xcb, 0x7e, 0x57, 0xcb, 0x2c, 0x4b, 0x48,
  0x2f, 0xfc, 0x81, 0xb7, 0xaf, 0xb9, 0xde, 0x27, 0xe1, 0xe3, 0xbd,
  0x23, 0xc2, 0x3a, 0x44, 0x53, 0xbd, 0x9a, 0xce, 0x32, 0x62
};
uint8_t const C_cy_BrainpoolP256r1_Gy[] = {
  // 0x547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F046997
  0x54, 0x7e, 0xf8, 0x35, 0xc3, 0xda, 0xc4, 0xfd, 0x97, 0xf8, 0x46,
  0x1a, 0x14, 0x61, 0x1d, 0xc9, 0xc2, 0x77, 0x45, 0x13, 0x2d, 0xed,
  0x8e, 0x54, 0x5c, 0x1d, 0x54, 0xc7, 0x2f, 0x04, 0x69, 0x97
};
uint8_t const C_cy_BrainpoolP256r1_n[] = {
  // 0xA9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A7
  0xa9, 0xfb, 0x57, 0xdb, 0xa1, 0xee, 0xa9, 0xbc, 0x3e, 0x66, 0x0a,
  0x90, 0x9d, 0x83, 0x8d, 0x71, 0x8c, 0x39, 0x7a, 0xa3, 0xb5, 0x61,
  0xa6, 0xf7, 0x90, 0x1e, 0x0e, 0x82, 0x97, 0x48, 0x56, 0xa7
};
uint8_t const C_cy_BrainpoolP256r1_Hn[] = {
  0x0b, 0x25, 0xf1, 0xb9, 0xc3, 0x23, 0x67, 0x62, 0x9b, 0x7f, 0x25,
  0xe7, 0x6c, 0x81, 0x5c, 0xb0, 0xf3, 0x5d, 0x17, 0x6a, 0x11, 0x34,
  0xe4, 0xa0, 0xe1, 0xd8, 0xd8, 0xde, 0x33, 0x12, 0xfc, 0xa6
};

#define C_cy_BrainpoolP256r1_h C_cofactor_1
cx_testvec_weierstrass_t const C_cy_BrainpoolP256r1 = {
  .curve = CY_CURVE_BrainPoolP256R1,
  .bit_size = 256,
  .length = 32,

  .a = C_cy_BrainpoolP256r1_a,
  .b = C_cy_BrainpoolP256r1_b,
  .p = C_cy_BrainpoolP256r1_p,
  .Gx = C_cy_BrainpoolP256r1_Gx,
  .Gy = C_cy_BrainpoolP256r1_Gy,
  .n = C_cy_BrainpoolP256r1_n,
  .h = C_cy_BrainpoolP256r1_h,
  .Hn = C_cy_BrainpoolP256r1_Hn,
  .Hp = C_cy_BrainpoolP256r1_Hp,
};

/* ------------------------------------------------------------------------ */
/* ---                       BrainpoolP256t1                            --- */
/* ------------------------------------------------------------------------ */

uint8_t const C_cy_BrainpoolP256t1_a[] = {
  // 0xA9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E5374
  0xa9, 0xfb, 0x57, 0xdb, 0xa1, 0xee, 0xa9, 0xbc, 0x3e, 0x66, 0x0a,
  0x90, 0x9d, 0x83, 0x8d, 0x72, 0x6e, 0x3b, 0xf6, 0x23, 0xd5, 0x26,
  0x20, 0x28, 0x20, 0x13, 0x48, 0x1d, 0x1f, 0x6e, 0x53, 0x74
};
uint8_t const C_cy_BrainpoolP256t1_b[] = {
  // 0x662C61C430D84EA4FE66A7733D0B76B7BF93EBC4AF2F49256AE58101FEE92B04
  0x66, 0x2c, 0x61, 0xc4, 0x30, 0xd8, 0x4e, 0xa4, 0xfe, 0x66, 0xa7,
  0x73, 0x3d, 0x0b, 0x76, 0xb7, 0xbf, 0x93, 0xeb, 0xc4, 0xaf, 0x2f,
  0x49, 0x25, 0x6a, 0xe5, 0x81, 0x01, 0xfe, 0xe9, 0x2b, 0x04
};
uint8_t const C_cy_BrainpoolP256t1_p[] = {
  // 0xA9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E5377
  0xa9, 0xfb, 0x57, 0xdb, 0xa1, 0xee, 0xa9, 0xbc, 0x3e, 0x66, 0x0a,
  0x90, 0x9d, 0x83, 0x8d, 0x72, 0x6e, 0x3b, 0xf6, 0x23, 0xd5, 0x26,
  0x20, 0x28, 0x20, 0x13, 0x48, 0x1d, 0x1f, 0x6e, 0x53, 0x77
};
uint8_t const C_cy_BrainpoolP256t1_Hp[] = {
  0x47, 0x17, 0xaa, 0x21, 0xe5, 0x95, 0x7f, 0xa8, 0xa1, 0xec, 0xda,
  0xcd, 0x6b, 0x1a, 0xc8, 0x07, 0x5c, 0xce, 0x4c, 0x26, 0x61, 0x4d,
  0x4f, 0x4d, 0x8c, 0xfe, 0xdf, 0x7b, 0xa6, 0x46, 0x5b, 0x6c
};
uint8_t const C_cy_BrainpoolP256t1_Gx[] = {
  // 0xA3E8EB3CC1CFE7B7732213B23A656149AFA142C47AAFBC2B79A191562E1305F4
  0xa3, 0xe8, 0xeb, 0x3c, 0xc1, 0xcf, 0xe7, 0xb7, 0x73, 0x22, 0x13,
  0xb2, 0x3a, 0x65, 0x61, 0x49, 0xaf, 0xa1, 0x42, 0xc4, 0x7a, 0xaf,
  0xbc, 0x2b, 0x79, 0xa1, 0x91, 0x56, 0x2e, 0x13, 0x05, 0xf4
};
uint8_t const C_cy_BrainpoolP256t1_Gy[] = {
  // 0x2D996C823439C56D7F7B22E14644417E69BCB6DE39D027001DABE8F35B25C9BE
  0x2d, 0x99, 0x6c, 0x82, 0x34, 0x39, 0xc5, 0x6d, 0x7f, 0x7b, 0x22,
  0xe1, 0x46, 0x44, 0x41, 0x7e, 0x69, 0xbc, 0xb6, 0xde, 0x39, 0xd0,
  0x27, 0x00, 0x1d, 0xab, 0xe8, 0xf3, 0x5b, 0x25, 0xc9, 0xbe
};
uint8_t const C_cy_BrainpoolP256t1_n[] = {
  // 0x
  0xa9, 0xfb, 0x57, 0xdb, 0xa1, 0xee, 0xa9, 0xbc, 0x3e, 0x66, 0x0a,
  0x90, 0x9d, 0x83, 0x8d, 0x71, 0x8c, 0x39, 0x7a, 0xa3, 0xb5, 0x61,
  0xa6, 0xf7, 0x90, 0x1e, 0x0e, 0x82, 0x97, 0x48, 0x56, 0xa7
};
uint8_t const C_cy_BrainpoolP256t1_Hn[] = {
  0x0b, 0x25, 0xf1, 0xb9, 0xc3, 0x23, 0x67, 0x62, 0x9b, 0x7f, 0x25,
  0xe7, 0x6c, 0x81, 0x5c, 0xb0, 0xf3, 0x5d, 0x17, 0x6a, 0x11, 0x34,
  0xe4, 0xa0, 0xe1, 0xd8, 0xd8, 0xde, 0x33, 0x12, 0xfc, 0xa6
};

#define C_cy_BrainpoolP256t1_h C_cofactor_1
cx_testvec_weierstrass_t const C_cy_BrainpoolP256t1 = {
  .curve = CY_CURVE_BrainPoolP256T1,
  .bit_size = 256,
  .length = 32,

  .a = C_cy_BrainpoolP256t1_a,
  .b = C_cy_BrainpoolP256t1_b,
  .p = C_cy_BrainpoolP256t1_p,
  .Gx = C_cy_BrainpoolP256t1_Gx,
  .Gy = C_cy_BrainpoolP256t1_Gy,
  .n = C_cy_BrainpoolP256t1_n,
  .h = C_cy_BrainpoolP256t1_h,
  .Hn = C_cy_BrainpoolP256t1_Hn,
  .Hp = C_cy_BrainpoolP256t1_Hp,
};

/* ------------------------------------------------------------------------ */
/* ---                       BrainpoolP320r1                            --- */
/* ------------------------------------------------------------------------ */

uint8_t const C_cy_BrainpoolP320r1_a[] = {
  // a:  0x
  0x3E, 0xE3, 0x0B, 0x56, 0x8F, 0xBA, 0xB0, 0xF8, 0x83, 0xCC,
  0xEB, 0xD4, 0x6D, 0x3F, 0x3B, 0xB8, 0xA2, 0xA7, 0x35, 0x13,
  0xF5, 0xEB, 0x79, 0xDA, 0x66, 0x19, 0x0E, 0xB0, 0x85, 0xFF,
  0xA9, 0xF4, 0x92, 0xF3, 0x75, 0xA9, 0x7D, 0x86, 0x0E, 0xB4
};
uint8_t const C_cy_BrainpoolP320r1_b[] = {
  // b:  0x
  0x52, 0x08, 0x83, 0x94, 0x9D, 0xFD, 0xBC, 0x42, 0xD3, 0xAD,
  0x19, 0x86, 0x40, 0x68, 0x8A, 0x6F, 0xE1, 0x3F, 0x41, 0x34,
  0x95, 0x54, 0xB4, 0x9A, 0xCC, 0x31, 0xDC, 0xCD, 0x88, 0x45,
  0x39, 0x81, 0x6F, 0x5E, 0xB4, 0xAC, 0x8F, 0xB1, 0xF1, 0xA6
};
uint8_t const C_cy_BrainpoolP320r1_p[] = {
  // p:
  // 0xD35E472036BC4FB7E13C785ED201E065F98FCFA6F6F40DEF4F92B9EC7893EC28FCD412B1F1B32E27
  0xD3, 0x5E, 0x47, 0x20, 0x36, 0xBC, 0x4F, 0xB7, 0xE1, 0x3C,
  0x78, 0x5E, 0xD2, 0x01, 0xE0, 0x65, 0xF9, 0x8F, 0xCF, 0xA6,
  0xF6, 0xF4, 0x0D, 0xEF, 0x4F, 0x92, 0xB9, 0xEC, 0x78, 0x93,
  0xEC, 0x28, 0xFC, 0xD4, 0x12, 0xB1, 0xF1, 0xB3, 0x2E, 0x27
};
uint8_t const C_cy_BrainpoolP320r1_Hp[] = {
  0x40, 0x3a, 0x05, 0x6e, 0x97, 0xa2, 0xc0, 0x9c, 0xdb, 0xc2,
  0x1a, 0x81, 0x77, 0x27, 0xa6, 0xd4, 0xc5, 0x3a, 0xa9, 0x67,
  0x5c, 0x40, 0x00, 0xf4, 0x10, 0x26, 0x0b, 0x24, 0xef, 0x82,
  0x14, 0x48, 0xb4, 0xe0, 0x40, 0x50, 0xad, 0x8b, 0x40, 0x0d,
};
uint8_t const C_cy_BrainpoolP320r1_Gx[] = {
  // Gx:
  // 0x43BD7E9AFB53D8B85289BCC48EE5BFE6F20137D10A087EB6E7871E2A10A599C710AF8D0D39E20611
  0x43, 0xBD, 0x7E, 0x9A, 0xFB, 0x53, 0xD8, 0xB8, 0x52, 0x89,
  0xBC, 0xC4, 0x8E, 0xE5, 0xBF, 0xE6, 0xF2, 0x01, 0x37, 0xD1,
  0x0A, 0x08, 0x7E, 0xB6, 0xE7, 0x87, 0x1E, 0x2A, 0x10, 0xA5,
  0x99, 0xC7, 0x10, 0xAF, 0x8D, 0x0D, 0x39, 0xE2, 0x06, 0x11
};
uint8_t const C_cy_BrainpoolP320r1_Gy[] = {
  // Gy,
  // 0x14FDD05545EC1CC8AB4093247F77275E0743FFED117182EAA9C77877AAAC6AC7D35245D1692E8EE1
  0x14, 0xFD, 0xD0, 0x55, 0x45, 0xEC, 0x1C, 0xC8, 0xAB, 0x40,
  0x93, 0x24, 0x7F, 0x77, 0x27, 0x5E, 0x07, 0x43, 0xFF, 0xED,
  0x11, 0x71, 0x82, 0xEA, 0xA9, 0xC7, 0x78, 0x77, 0xAA, 0xAC,
  0x6A, 0xC7, 0xD3, 0x52, 0x45, 0xD1, 0x69, 0x2E, 0x8E, 0xE1
};
uint8_t const C_cy_BrainpoolP320r1_n[] = {
  // n:
  // 0xD35E472036BC4FB7E13C785ED201E065F98FCFA5B68F12A32D482EC7EE8658E98691555B44C59311
  0xD3, 0x5E, 0x47, 0x20, 0x36, 0xBC, 0x4F, 0xB7, 0xE1, 0x3C,
  0x78, 0x5E, 0xD2, 0x01, 0xE0, 0x65, 0xF9, 0x8F, 0xCF, 0xA5,
  0xB6, 0x8F, 0x12, 0xA3, 0x2D, 0x48, 0x2E, 0xC7, 0xEE, 0x86,
  0x58, 0xE9, 0x86, 0x91, 0x55, 0x5B, 0x44, 0xC5, 0x93, 0x11
};
uint8_t const C_cy_BrainpoolP320r1_Hn[] = {
  0xa7, 0x0d, 0x3d, 0xb6, 0xd2, 0x66, 0x8a, 0x95, 0x3b, 0x53,
  0x96, 0xfe, 0xb0, 0x0b, 0x95, 0x14, 0x07, 0xad, 0x16, 0x66,
  0x45, 0x8b, 0xcc, 0x15, 0xdd, 0x86, 0x02, 0x95, 0xe4, 0xa3,
  0xf1, 0xa0, 0xb9, 0xb6, 0xac, 0x1d, 0x66, 0x16, 0x3f, 0x17,

};

#define C_cy_BrainpoolP320r1_h C_cofactor_1
cx_testvec_weierstrass_t const C_cy_BrainpoolP320r1 = {
  .curve = CY_CURVE_BrainPoolP320R1,
  // 384, 48,
  .bit_size = 320,
  .length = 40,

  .a = C_cy_BrainpoolP320r1_a,
  .b = C_cy_BrainpoolP320r1_b,
  .p = C_cy_BrainpoolP320r1_p,
  .Gx = C_cy_BrainpoolP320r1_Gx,
  .Gy = C_cy_BrainpoolP320r1_Gy,
  .n = C_cy_BrainpoolP320r1_n,
  .h = C_cy_BrainpoolP320r1_h,
  .Hp = C_cy_BrainpoolP320r1_Hp,
  .Hn = C_cy_BrainpoolP320r1_Hn,
};

/* ------------------------------------------------------------------------ */
/* ---                       BrainpoolP320t1                            --- */
/* ------------------------------------------------------------------------ */

uint8_t const C_cy_BrainpoolP320t1_a[] = {
  // a:
  // 0xD35E472036BC4FB7E13C785ED201E065F98FCFA6F6F40DEF4F92B9EC7893EC28FCD412B1F1B32E24
  0xD3, 0x5E, 0x47, 0x20, 0x36, 0xBC, 0x4F, 0xB7, 0xE1, 0x3C,
  0x78, 0x5E, 0xD2, 0x01, 0xE0, 0x65, 0xF9, 0x8F, 0xCF, 0xA6,
  0xF6, 0xF4, 0x0D, 0xEF, 0x4F, 0x92, 0xB9, 0xEC, 0x78, 0x93,
  0xEC, 0x28, 0xFC, 0xD4, 0x12, 0xB1, 0xF1, 0xB3, 0x2E, 0x24
};
uint8_t const C_cy_BrainpoolP320t1_b[] = {
  // b:
  // 0xA7F561E038EB1ED560B3D147DB782013064C19F27ED27C6780AAF77FB8A547CEB5B4FEF422340353
  0xA7, 0xF5, 0x61, 0xE0, 0x38, 0xEB, 0x1E, 0xD5, 0x60, 0xB3,
  0xD1, 0x47, 0xDB, 0x78, 0x20, 0x13, 0x06, 0x4C, 0x19, 0xF2,
  0x7E, 0xD2, 0x7C, 0x67, 0x80, 0xAA, 0xF7, 0x7F, 0xB8, 0xA5,
  0x47, 0xCE, 0xB5, 0xB4, 0xFE, 0xF4, 0x22, 0x34, 0x03, 0x53
};
uint8_t const C_cy_BrainpoolP320t1_p[] = {
  // p:
  // 0xD35E472036BC4FB7E13C785ED201E065F98FCFA6F6F40DEF4F92B9EC7893EC28FCD412B1F1B32E27
  0xD3, 0x5E, 0x47, 0x20, 0x36, 0xBC, 0x4F, 0xB7, 0xE1, 0x3C,
  0x78, 0x5E, 0xD2, 0x01, 0xE0, 0x65, 0xF9, 0x8F, 0xCF, 0xA6,
  0xF6, 0xF4, 0x0D, 0xEF, 0x4F, 0x92, 0xB9, 0xEC, 0x78, 0x93,
  0xEC, 0x28, 0xFC, 0xD4, 0x12, 0xB1, 0xF1, 0xB3, 0x2E, 0x27
};
uint8_t const C_cy_BrainpoolP320t1_Hp[] = {
  0x40, 0x3a, 0x05, 0x6e, 0x97, 0xa2, 0xc0, 0x9c, 0xdb, 0xc2,
  0x1a, 0x81, 0x77, 0x27, 0xa6, 0xd4, 0xc5, 0x3a, 0xa9, 0x67,
  0x5c, 0x40, 0x00, 0xf4, 0x10, 0x26, 0x0b, 0x24, 0xef, 0x82,
  0x14, 0x48, 0xb4, 0xe0, 0x40, 0x50, 0xad, 0x8b, 0x40, 0x0d
};
uint8_t const C_cy_BrainpoolP320t1_Gx[] = {
  // Gx:
  // 0x925BE9FB01AFC6FB4D3E7D4990010F813408AB106C4F09CB7EE07868CC136FFF3357F624A21BED52
  0x92, 0x5B, 0xE9, 0xFB, 0x01, 0xAF, 0xC6, 0xFB, 0x4D, 0x3E,
  0x7D, 0x49, 0x90, 0x01, 0x0F, 0x81, 0x34, 0x08, 0xAB, 0x10,
  0x6C, 0x4F, 0x09, 0xCB, 0x7E, 0xE0, 0x78, 0x68, 0xCC, 0x13,
  0x6F, 0xFF, 0x33, 0x57, 0xF6, 0x24, 0xA2, 0x1B, 0xED, 0x52
};
uint8_t const C_cy_BrainpoolP320t1_Gy[] = {
  // Gy:
  // 0x63BA3A7A27483EBF6671DBEF7ABB30EBEE084E58A0B077AD42A5A0989D1EE71B1B9BC0455FB0D2C3
  0x63, 0xBA, 0x3A, 0x7A, 0x27, 0x48, 0x3E, 0xBF, 0x66, 0x71,
  0xDB, 0xEF, 0x7A, 0xBB, 0x30, 0xEB, 0xEE, 0x08, 0x4E, 0x58,
  0xA0, 0xB0, 0x77, 0xAD, 0x42, 0xA5, 0xA0, 0x98, 0x9D, 0x1E,
  0xE7, 0x1B, 0x1B, 0x9B, 0xC0, 0x45, 0x5F, 0xB0, 0xD2, 0xC3
};
uint8_t const C_cy_BrainpoolP320t1_n[] = {
  // n:
  // 0xD35E472036BC4FB7E13C785ED201E065F98FCFA5B68F12A32D482EC7EE8658E98691555B44C59311
  0xD3, 0x5E, 0x47, 0x20, 0x36, 0xBC, 0x4F, 0xB7, 0xE1, 0x3C,
  0x78, 0x5E, 0xD2, 0x01, 0xE0, 0x65, 0xF9, 0x8F, 0xCF, 0xA5,
  0xB6, 0x8F, 0x12, 0xA3, 0x2D, 0x48, 0x2E, 0xC7, 0xEE, 0x86,
  0x58, 0xE9, 0x86, 0x91, 0x55, 0x5B, 0x44, 0xC5, 0x93, 0x11
};
uint8_t const C_cy_BrainpoolP320t1_Hn[] = {
  0xa7, 0x0d, 0x3d, 0xb6, 0xd2, 0x66, 0x8a, 0x95, 0x3b, 0x53,
  0x96, 0xfe, 0xb0, 0x0b, 0x95, 0x14, 0x07, 0xad, 0x16, 0x66,
  0x45, 0x8b, 0xcc, 0x15, 0xdd, 0x86, 0x02, 0x95, 0xe4, 0xa3,
  0xf1, 0xa0, 0xb9, 0xb6, 0xac, 0x1d, 0x66, 0x16, 0x3f, 0x17
};

#define C_cy_BrainpoolP320t1_h C_cofactor_1
cx_testvec_weierstrass_t const C_cy_BrainpoolP320t1 = {
  .curve = CY_CURVE_BrainPoolP320T1,
  // 384, 48,
  .bit_size = 320,
  .length = 40,

  .a = C_cy_BrainpoolP320t1_a,
  .b = C_cy_BrainpoolP320t1_b,
  .p = C_cy_BrainpoolP320t1_p,
  .Gx = C_cy_BrainpoolP320t1_Gx,
  .Gy = C_cy_BrainpoolP320t1_Gy,
  .n = C_cy_BrainpoolP320t1_n,
  .h = C_cy_BrainpoolP320t1_h,
  .Hp = C_cy_BrainpoolP320t1_Hp,
  .Hn = C_cy_BrainpoolP320t1_Hn,
};

/* ------------------------------------------------------------------------ */
/* ---                       BrainpoolP384r1                            --- */
/* ------------------------------------------------------------------------ */

uint8_t const C_cy_BrainpoolP384r1_a[] = {
  // a:
  // 0x7BC382C63D8C150C3C72080ACE05AFA0C2BEA28E4FB22787139165EFBA91F90F8AA5814A503AD4EB04A8C7DD22CE2826
  0x7B, 0xC3, 0x82, 0xC6, 0x3D, 0x8C, 0x15, 0x0C, 0x3C, 0x72, 0x08, 0x0A,
  0xCE, 0x05, 0xAF, 0xA0, 0xC2, 0xBE, 0xA2, 0x8E, 0x4F, 0xB2, 0x27, 0x87,
  0x13, 0x91, 0x65, 0xEF, 0xBA, 0x91, 0xF9, 0x0F, 0x8A, 0xA5, 0x81, 0x4A,
  0x50, 0x3A, 0xD4, 0xEB, 0x04, 0xA8, 0xC7, 0xDD, 0x22, 0xCE, 0x28, 0x26
};
uint8_t const C_cy_BrainpoolP384r1_b[] = {
  // b:
  // 0x04A8C7DD22CE28268B39B55416F0447C2FB77DE107DCD2A62E880EA53EEB62D57CB4390295DBC9943AB78696FA504C11
  0x04, 0xA8, 0xC7, 0xDD, 0x22, 0xCE, 0x28, 0x26, 0x8B, 0x39, 0xB5, 0x54,
  0x16, 0xF0, 0x44, 0x7C, 0x2F, 0xB7, 0x7D, 0xE1, 0x07, 0xDC, 0xD2, 0xA6,
  0x2E, 0x88, 0x0E, 0xA5, 0x3E, 0xEB, 0x62, 0xD5, 0x7C, 0xB4, 0x39, 0x02,
  0x95, 0xDB, 0xC9, 0x94, 0x3A, 0xB7, 0x86, 0x96, 0xFA, 0x50, 0x4C, 0x11
};
uint8_t const C_cy_BrainpoolP384r1_p[] = {
  // p:
  // 0x8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B412B1DA197FB71123ACD3A729901D1A71874700133107EC53
  0x8C, 0xB9, 0x1E, 0x82, 0xA3, 0x38, 0x6D, 0x28, 0x0F, 0x5D, 0x6F, 0x7E,
  0x50, 0xE6, 0x41, 0xDF, 0x15, 0x2F, 0x71, 0x09, 0xED, 0x54, 0x56, 0xB4,
  0x12, 0xB1, 0xDA, 0x19, 0x7F, 0xB7, 0x11, 0x23, 0xAC, 0xD3, 0xA7, 0x29,
  0x90, 0x1D, 0x1A, 0x71, 0x87, 0x47, 0x00, 0x13, 0x31, 0x07, 0xEC, 0x53
};
uint8_t const C_cy_BrainpoolP384r1_Hp[] = {
  0x36, 0xbf, 0x68, 0x83, 0x17, 0x8d, 0xf8, 0x42, 0xd5, 0xc6, 0xef, 0x3b,
  0xa5, 0x7e, 0x05, 0x2c, 0x62, 0x14, 0x01, 0x91, 0x99, 0x18, 0xd5, 0xaf,
  0x8e, 0x28, 0xf9, 0x9c, 0xc9, 0x94, 0x08, 0x99, 0x53, 0x52, 0x83, 0x34,
  0x3d, 0x7f, 0xd9, 0x65, 0x08, 0x7c, 0xef, 0xff, 0x40, 0xb6, 0x4b, 0xde
};
uint8_t const C_cy_BrainpoolP384r1_Gx[] = {
  // Gx:
  // 0x1D1C64F068CF45FFA2A63A81B7C13F6B8847A3E77EF14FE3DB7FCAFE0CBD10E8E826E03436D646AAEF87B2E247D4AF1E
  0x1D, 0x1C, 0x64, 0xF0, 0x68, 0xCF, 0x45, 0xFF, 0xA2, 0xA6, 0x3A, 0x81,
  0xB7, 0xC1, 0x3F, 0x6B, 0x88, 0x47, 0xA3, 0xE7, 0x7E, 0xF1, 0x4F, 0xE3,
  0xDB, 0x7F, 0xCA, 0xFE, 0x0C, 0xBD, 0x10, 0xE8, 0xE8, 0x26, 0xE0, 0x34,
  0x36, 0xD6, 0x46, 0xAA, 0xEF, 0x87, 0xB2, 0xE2, 0x47, 0xD4, 0xAF, 0x1E
};
uint8_t const C_cy_BrainpoolP384r1_Gy[] = {
  // Gy:
  // 0x8ABE1D7520F9C2A45CB1EB8E95CFD55262B70B29FEEC5864E19C054FF99129280E4646217791811142820341263C5315
  0x8A, 0xBE, 0x1D, 0x75, 0x20, 0xF9, 0xC2, 0xA4, 0x5C, 0xB1, 0xEB, 0x8E,
  0x95, 0xCF, 0xD5, 0x52, 0x62, 0xB7, 0x0B, 0x29, 0xFE, 0xEC, 0x58, 0x64,
  0xE1, 0x9C, 0x05, 0x4F, 0xF9, 0x91, 0x29, 0x28, 0x0E, 0x46, 0x46, 0x21,
  0x77, 0x91, 0x81, 0x11, 0x42, 0x82, 0x03, 0x41, 0x26, 0x3C, 0x53, 0x15
};
uint8_t const C_cy_BrainpoolP384r1_n[] = {
  // n:
  // 0x8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B31F166E6CAC0425A7CF3AB6AF6B7FC3103B883202E9046565
  0x8C, 0xB9, 0x1E, 0x82, 0xA3, 0x38, 0x6D, 0x28, 0x0F, 0x5D, 0x6F, 0x7E,
  0x50, 0xE6, 0x41, 0xDF, 0x15, 0x2F, 0x71, 0x09, 0xED, 0x54, 0x56, 0xB3,
  0x1F, 0x16, 0x6E, 0x6C, 0xAC, 0x04, 0x25, 0xA7, 0xCF, 0x3A, 0xB6, 0xAF,
  0x6B, 0x7F, 0xC3, 0x10, 0x3B, 0x88, 0x32, 0x02, 0xE9, 0x04, 0x65, 0x65
};
uint8_t const C_cy_BrainpoolP384r1_Hn[] = {
  0x0c, 0xe8, 0x94, 0x1a, 0x61, 0x4e, 0x97, 0xc2, 0x8f, 0x88, 0x6d, 0xc9,
  0x65, 0x16, 0x5f, 0xdb, 0x57, 0x4a, 0x74, 0xcb, 0x52, 0xd7, 0x48, 0xff,
  0x2a, 0x92, 0x7e, 0x3b, 0x98, 0x02, 0x68, 0x8a, 0x37, 0x26, 0x4e, 0x20,
  0x2f, 0x2b, 0x6b, 0x6e, 0xac, 0x4e, 0xd3, 0xa2, 0xde, 0x77, 0x1c, 0x8e
};

#define C_cy_BrainpoolP384r1_h C_cofactor_1
cx_testvec_weierstrass_t const C_cy_BrainpoolP384r1 = {
  .curve = CY_CURVE_BrainPoolP384R1,
  .bit_size = 384,
  .length = 48,

  .a = C_cy_BrainpoolP384r1_a,
  .b = C_cy_BrainpoolP384r1_b,
  .p = C_cy_BrainpoolP384r1_p,
  .Gx = C_cy_BrainpoolP384r1_Gx,
  .Gy = C_cy_BrainpoolP384r1_Gy,
  .n = C_cy_BrainpoolP384r1_n,
  .h = C_cy_BrainpoolP384r1_h,
  .Hp = C_cy_BrainpoolP384r1_Hp,
  .Hn = C_cy_BrainpoolP384r1_Hn,
};

/* ------------------------------------------------------------------------ */
/* ---                       BrainpoolP384t1                            --- */
/* ------------------------------------------------------------------------ */

uint8_t const C_cy_BrainpoolP384t1_a[] = {
  // a:
  // 0x8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B412B1DA197FB71123ACD3A729901D1A71874700133107EC50
  0x8C, 0xB9, 0x1E, 0x82, 0xA3, 0x38, 0x6D, 0x28, 0x0F, 0x5D, 0x6F, 0x7E,
  0x50, 0xE6, 0x41, 0xDF, 0x15, 0x2F, 0x71, 0x09, 0xED, 0x54, 0x56, 0xB4,
  0x12, 0xB1, 0xDA, 0x19, 0x7F, 0xB7, 0x11, 0x23, 0xAC, 0xD3, 0xA7, 0x29,
  0x90, 0x1D, 0x1A, 0x71, 0x87, 0x47, 0x00, 0x13, 0x31, 0x07, 0xEC, 0x50
};
uint8_t const C_cy_BrainpoolP384t1_b[] = {
  // b:
  // 0x7F519EADA7BDA81BD826DBA647910F8C4B9346ED8CCDC64E4B1ABD11756DCE1D2074AA263B88805CED70355A33B471EE
  0x7F, 0x51, 0x9E, 0xAD, 0xA7, 0xBD, 0xA8, 0x1B, 0xD8, 0x26, 0xDB, 0xA6,
  0x47, 0x91, 0x0F, 0x8C, 0x4B, 0x93, 0x46, 0xED, 0x8C, 0xCD, 0xC6, 0x4E,
  0x4B, 0x1A, 0xBD, 0x11, 0x75, 0x6D, 0xCE, 0x1D, 0x20, 0x74, 0xAA, 0x26,
  0x3B, 0x88, 0x80, 0x5C, 0xED, 0x70, 0x35, 0x5A, 0x33, 0xB4, 0x71, 0xEE
};
uint8_t const C_cy_BrainpoolP384t1_p[] = {
  // p:
  // 0x8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B412B1DA197FB71123ACD3A729901D1A71874700133107EC53
  0x8C, 0xB9, 0x1E, 0x82, 0xA3, 0x38, 0x6D, 0x28, 0x0F, 0x5D, 0x6F, 0x7E,
  0x50, 0xE6, 0x41, 0xDF, 0x15, 0x2F, 0x71, 0x09, 0xED, 0x54, 0x56, 0xB4,
  0x12, 0xB1, 0xDA, 0x19, 0x7F, 0xB7, 0x11, 0x23, 0xAC, 0xD3, 0xA7, 0x29,
  0x90, 0x1D, 0x1A, 0x71, 0x87, 0x47, 0x00, 0x13, 0x31, 0x07, 0xEC, 0x53
};
uint8_t const C_cy_BrainpoolP384t1_Hp[] = {
  0x36, 0xbf, 0x68, 0x83, 0x17, 0x8d, 0xf8, 0x42, 0xd5, 0xc6, 0xef, 0x3b,
  0xa5, 0x7e, 0x05, 0x2c, 0x62, 0x14, 0x01, 0x91, 0x99, 0x18, 0xd5, 0xaf,
  0x8e, 0x28, 0xf9, 0x9c, 0xc9, 0x94, 0x08, 0x99, 0x53, 0x52, 0x83, 0x34,
  0x3d, 0x7f, 0xd9, 0x65, 0x08, 0x7c, 0xef, 0xff, 0x40, 0xb6, 0x4b, 0xde
};
uint8_t const C_cy_BrainpoolP384t1_Gx[] = {
  // Gx:
  // 0x18DE98B02DB9A306F2AFCD7235F72A819B80AB12EBD653172476FECD462AABFFC4FF191B946A5F54D8D0AA2F418808CC
  0x18, 0xDE, 0x98, 0xB0, 0x2D, 0xB9, 0xA3, 0x06, 0xF2, 0xAF, 0xCD, 0x72,
  0x35, 0xF7, 0x2A, 0x81, 0x9B, 0x80, 0xAB, 0x12, 0xEB, 0xD6, 0x53, 0x17,
  0x24, 0x76, 0xFE, 0xCD, 0x46, 0x2A, 0xAB, 0xFF, 0xC4, 0xFF, 0x19, 0x1B,
  0x94, 0x6A, 0x5F, 0x54, 0xD8, 0xD0, 0xAA, 0x2F, 0x41, 0x88, 0x08, 0xCC
};
uint8_t const C_cy_BrainpoolP384t1_Gy[] = {
  // Gy:
  // 0x25AB056962D30651A114AFD2755AD336747F93475B7A1FCA3B88F2B6A208CCFE469408584DC2B2912675BF5B9E582928
  0x25, 0xAB, 0x05, 0x69, 0x62, 0xD3, 0x06, 0x51, 0xA1, 0x14, 0xAF, 0xD2,
  0x75, 0x5A, 0xD3, 0x36, 0x74, 0x7F, 0x93, 0x47, 0x5B, 0x7A, 0x1F, 0xCA,
  0x3B, 0x88, 0xF2, 0xB6, 0xA2, 0x08, 0xCC, 0xFE, 0x46, 0x94, 0x08, 0x58,
  0x4D, 0xC2, 0xB2, 0x91, 0x26, 0x75, 0xBF, 0x5B, 0x9E, 0x58, 0x29, 0x28
};
uint8_t const C_cy_BrainpoolP384t1_n[] = {
  // n:
  // 0x8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B31F166E6CAC0425A7CF3AB6AF6B7FC3103B883202E9046565
  0x8C, 0xB9, 0x1E, 0x82, 0xA3, 0x38, 0x6D, 0x28, 0x0F, 0x5D, 0x6F, 0x7E,
  0x50, 0xE6, 0x41, 0xDF, 0x15, 0x2F, 0x71, 0x09, 0xED, 0x54, 0x56, 0xB3,
  0x1F, 0x16, 0x6E, 0x6C, 0xAC, 0x04, 0x25, 0xA7, 0xCF, 0x3A, 0xB6, 0xAF,
  0x6B, 0x7F, 0xC3, 0x10, 0x3B, 0x88, 0x32, 0x02, 0xE9, 0x04, 0x65, 0x65
};
uint8_t const C_cy_BrainpoolP384t1_Hn[] = {
  0x0c, 0xe8, 0x94, 0x1a, 0x61, 0x4e, 0x97, 0xc2, 0x8f, 0x88, 0x6d, 0xc9,
  0x65, 0x16, 0x5f, 0xdb, 0x57, 0x4a, 0x74, 0xcb, 0x52, 0xd7, 0x48, 0xff,
  0x2a, 0x92, 0x7e, 0x3b, 0x98, 0x02, 0x68, 0x8a, 0x37, 0x26, 0x4e, 0x20,
  0x2f, 0x2b, 0x6b, 0x6e, 0xac, 0x4e, 0xd3, 0xa2, 0xde, 0x77, 0x1c, 0x8e
};

#define C_cy_BrainpoolP384t1_h C_cofactor_1
cx_testvec_weierstrass_t const C_cy_BrainpoolP384t1 = {
  .curve = CY_CURVE_BrainPoolP384T1,
  .bit_size = 384,
  .length = 48,

  .a = C_cy_BrainpoolP384t1_a,
  .b = C_cy_BrainpoolP384t1_b,
  .p = C_cy_BrainpoolP384t1_p,
  .Gx = C_cy_BrainpoolP384t1_Gx,
  .Gy = C_cy_BrainpoolP384t1_Gy,
  .n = C_cy_BrainpoolP384t1_n,
  .h = C_cy_BrainpoolP384t1_h,
  .Hp = C_cy_BrainpoolP384t1_Hp,
  .Hn = C_cy_BrainpoolP384t1_Hn,
};

/* ------------------------------------------------------------------------ */
/* ---                       BrainpoolP512r1                            --- */
/* ------------------------------------------------------------------------ */

uint8_t const C_cy_BrainpoolP512r1_a[] = {
  // a:
  // 0x7830A3318B603B89E2327145AC234CC594CBDD8D3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CA
  0x78, 0x30, 0xA3, 0x31, 0x8B, 0x60, 0x3B, 0x89, 0xE2, 0x32, 0x71, 0x45, 0xAC,
  0x23, 0x4C, 0xC5, 0x94, 0xCB, 0xDD, 0x8D, 0x3D, 0xF9, 0x16, 0x10, 0xA8, 0x34,
  0x41, 0xCA, 0xEA, 0x98, 0x63, 0xBC, 0x2D, 0xED, 0x5D, 0x5A, 0xA8, 0x25, 0x3A,
  0xA1, 0x0A, 0x2E, 0xF1, 0xC9, 0x8B, 0x9A, 0xC8, 0xB5, 0x7F, 0x11, 0x17, 0xA7,
  0x2B, 0xF2, 0xC7, 0xB9, 0xE7, 0xC1, 0xAC, 0x4D, 0x77, 0xFC, 0x94, 0xCA
};
uint8_t const C_cy_BrainpoolP512r1_b[] = {
  // b:
  // 0x3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CADC083E67984050B75EBAE5DD2809BD638016F723
  0x3D, 0xF9, 0x16, 0x10, 0xA8, 0x34, 0x41, 0xCA, 0xEA, 0x98, 0x63, 0xBC, 0x2D,
  0xED, 0x5D, 0x5A, 0xA8, 0x25, 0x3A, 0xA1, 0x0A, 0x2E, 0xF1, 0xC9, 0x8B, 0x9A,
  0xC8, 0xB5, 0x7F, 0x11, 0x17, 0xA7, 0x2B, 0xF2, 0xC7, 0xB9, 0xE7, 0xC1, 0xAC,
  0x4D, 0x77, 0xFC, 0x94, 0xCA, 0xDC, 0x08, 0x3E, 0x67, 0x98, 0x40, 0x50, 0xB7,
  0x5E, 0xBA, 0xE5, 0xDD, 0x28, 0x09, 0xBD, 0x63, 0x80, 0x16, 0xF7, 0x23
};
uint8_t const C_cy_BrainpoolP512r1_p[] = {
  // p:
  // 0xAADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3
  0xAA, 0xDD, 0x9D, 0xB8, 0xDB, 0xE9, 0xC4, 0x8B, 0x3F, 0xD4, 0xE6, 0xAE, 0x33,
  0xC9, 0xFC, 0x07, 0xCB, 0x30, 0x8D, 0xB3, 0xB3, 0xC9, 0xD2, 0x0E, 0xD6, 0x63,
  0x9C, 0xCA, 0x70, 0x33, 0x08, 0x71, 0x7D, 0x4D, 0x9B, 0x00, 0x9B, 0xC6, 0x68,
  0x42, 0xAE, 0xCD, 0xA1, 0x2A, 0xE6, 0xA3, 0x80, 0xE6, 0x28, 0x81, 0xFF, 0x2F,
  0x2D, 0x82, 0xC6, 0x85, 0x28, 0xAA, 0x60, 0x56, 0x58, 0x3A, 0x48, 0xF3
};
uint8_t const C_cy_BrainpoolP512r1_Hp[] = {
  0x3c, 0x4c, 0x9d, 0x05, 0xa9, 0xff, 0x64, 0x50, 0x20, 0x2e, 0x19, 0x40, 0x20,
  0x56, 0xee, 0xcc, 0xa1, 0x6d, 0xaa, 0x5f, 0xd4, 0x2b, 0xff, 0x83, 0x19, 0x48,
  0x6f, 0xd8, 0xd5, 0x89, 0x80, 0x57, 0xe0, 0xc1, 0x9a, 0x77, 0x83, 0x51, 0x4a,
  0x25, 0x53, 0xb7, 0xf9, 0xbc, 0x90, 0x5a, 0xff, 0xd3, 0x79, 0x3f, 0xb1, 0x30,
  0x27, 0x15, 0x79, 0x05, 0x49, 0xad, 0x14, 0x4a, 0x61, 0x58, 0xf2, 0x05
};
uint8_t const C_cy_BrainpoolP512r1_Gx[] = {
  // Gx:
  // 0x81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D0098EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822
  0x81, 0xAE, 0xE4, 0xBD, 0xD8, 0x2E, 0xD9, 0x64, 0x5A, 0x21, 0x32, 0x2E, 0x9C,
  0x4C, 0x6A, 0x93, 0x85, 0xED, 0x9F, 0x70, 0xB5, 0xD9, 0x16, 0xC1, 0xB4, 0x3B,
  0x62, 0xEE, 0xF4, 0xD0, 0x09, 0x8E, 0xFF, 0x3B, 0x1F, 0x78, 0xE2, 0xD0, 0xD4,
  0x8D, 0x50, 0xD1, 0x68, 0x7B, 0x93, 0xB9, 0x7D, 0x5F, 0x7C, 0x6D, 0x50, 0x47,
  0x40, 0x6A, 0x5E, 0x68, 0x8B, 0x35, 0x22, 0x09, 0xBC, 0xB9, 0xF8, 0x22
};
uint8_t const C_cy_BrainpoolP512r1_Gy[] = {
  // Gy:
  // 0x7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F8111B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892
  0x7D, 0xDE, 0x38, 0x5D, 0x56, 0x63, 0x32, 0xEC, 0xC0, 0xEA, 0xBF, 0xA9, 0xCF,
  0x78, 0x22, 0xFD, 0xF2, 0x09, 0xF7, 0x00, 0x24, 0xA5, 0x7B, 0x1A, 0xA0, 0x00,
  0xC5, 0x5B, 0x88, 0x1F, 0x81, 0x11, 0xB2, 0xDC, 0xDE, 0x49, 0x4A, 0x5F, 0x48,
  0x5E, 0x5B, 0xCA, 0x4B, 0xD8, 0x8A, 0x27, 0x63, 0xAE, 0xD1, 0xCA, 0x2B, 0x2F,
  0xA8, 0xF0, 0x54, 0x06, 0x78, 0xCD, 0x1E, 0x0F, 0x3A, 0xD8, 0x08, 0x92
};
uint8_t const C_cy_BrainpoolP512r1_n[] = {
  // n:
  // 0xAADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA70330870553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069
  0xAA, 0xDD, 0x9D, 0xB8, 0xDB, 0xE9, 0xC4, 0x8B, 0x3F, 0xD4, 0xE6, 0xAE, 0x33,
  0xC9, 0xFC, 0x07, 0xCB, 0x30, 0x8D, 0xB3, 0xB3, 0xC9, 0xD2, 0x0E, 0xD6, 0x63,
  0x9C, 0xCA, 0x70, 0x33, 0x08, 0x70, 0x55, 0x3E, 0x5C, 0x41, 0x4C, 0xA9, 0x26,
  0x19, 0x41, 0x86, 0x61, 0x19, 0x7F, 0xAC, 0x10, 0x47, 0x1D, 0xB1, 0xD3, 0x81,
  0x08, 0x5D, 0xDA, 0xDD, 0xB5, 0x87, 0x96, 0x82, 0x9C, 0xA9, 0x00, 0x69
};
uint8_t const C_cy_BrainpoolP512r1_Hn[] = {
  0xa7, 0x94, 0x58, 0x6a, 0x71, 0x84, 0x07, 0xb0, 0x95, 0xdf, 0x1b, 0x4c, 0x19,
  0x4b, 0x2e, 0x56, 0x72, 0x3c, 0x37, 0xa2, 0x2f, 0x16, 0xbb, 0xdf, 0xd7, 0xf9,
  0xcc, 0x26, 0x3b, 0x79, 0x0d, 0xe3, 0xa6, 0xf2, 0x30, 0xc7, 0x2f, 0x02, 0x07,
  0xe8, 0x3e, 0xc6, 0x4b, 0xd0, 0x33, 0xb7, 0x62, 0x7f, 0x08, 0x86, 0xb7, 0x58,
  0x95, 0x28, 0x3d, 0xdd, 0xd2, 0xa3, 0x68, 0x1e, 0xcd, 0xa8, 0x16, 0x71
};

#define C_cy_BrainpoolP512r1_h C_cofactor_1
cx_testvec_weierstrass_t const C_cy_BrainpoolP512r1 = {
  .curve = CY_CURVE_BrainPoolP512R1,
  .bit_size = 512,
  .length = 64,

  .a = C_cy_BrainpoolP512r1_a,
  .b = C_cy_BrainpoolP512r1_b,
  .p = C_cy_BrainpoolP512r1_p,
  .Gx = C_cy_BrainpoolP512r1_Gx,
  .Gy = C_cy_BrainpoolP512r1_Gy,
  .n = C_cy_BrainpoolP512r1_n,
  .h = C_cy_BrainpoolP512r1_h,
  .Hp = C_cy_BrainpoolP512r1_Hp,
  .Hn = C_cy_BrainpoolP512r1_Hn,
};

/* ------------------------------------------------------------------------ */
/* ---                       BrainpoolP512t1                            --- */
/* ------------------------------------------------------------------------ */

uint8_t const C_cy_BrainpoolP512t1_a[] = {
  // a:
  // 0xAADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F0
  0xAA, 0xDD, 0x9D, 0xB8, 0xDB, 0xE9, 0xC4, 0x8B, 0x3F, 0xD4, 0xE6, 0xAE, 0x33,
  0xC9, 0xFC, 0x07, 0xCB, 0x30, 0x8D, 0xB3, 0xB3, 0xC9, 0xD2, 0x0E, 0xD6, 0x63,
  0x9C, 0xCA, 0x70, 0x33, 0x08, 0x71, 0x7D, 0x4D, 0x9B, 0x00, 0x9B, 0xC6, 0x68,
  0x42, 0xAE, 0xCD, 0xA1, 0x2A, 0xE6, 0xA3, 0x80, 0xE6, 0x28, 0x81, 0xFF, 0x2F,
  0x2D, 0x82, 0xC6, 0x85, 0x28, 0xAA, 0x60, 0x56, 0x58, 0x3A, 0x48, 0xF0
};
uint8_t const C_cy_BrainpoolP512t1_b[] = {
  // b:
  // 0x7CBBBCF9441CFAB76E1890E46884EAE321F70C0BCB4981527897504BEC3E36A62BCDFA2304976540F6450085F2DAE145C22553B465763689180EA2571867423E
  0x7C, 0xBB, 0xBC, 0xF9, 0x44, 0x1C, 0xFA, 0xB7, 0x6E, 0x18, 0x90, 0xE4, 0x68,
  0x84, 0xEA, 0xE3, 0x21, 0xF7, 0x0C, 0x0B, 0xCB, 0x49, 0x81, 0x52, 0x78, 0x97,
  0x50, 0x4B, 0xEC, 0x3E, 0x36, 0xA6, 0x2B, 0xCD, 0xFA, 0x23, 0x04, 0x97, 0x65,
  0x40, 0xF6, 0x45, 0x00, 0x85, 0xF2, 0xDA, 0xE1, 0x45, 0xC2, 0x25, 0x53, 0xB4,
  0x65, 0x76, 0x36, 0x89, 0x18, 0x0E, 0xA2, 0x57, 0x18, 0x67, 0x42, 0x3E
};
uint8_t const C_cy_BrainpoolP512t1_p[] = {
  // p:
  // 0xAADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3
  0xAA, 0xDD, 0x9D, 0xB8, 0xDB, 0xE9, 0xC4, 0x8B, 0x3F, 0xD4, 0xE6, 0xAE, 0x33,
  0xC9, 0xFC, 0x07, 0xCB, 0x30, 0x8D, 0xB3, 0xB3, 0xC9, 0xD2, 0x0E, 0xD6, 0x63,
  0x9C, 0xCA, 0x70, 0x33, 0x08, 0x71, 0x7D, 0x4D, 0x9B, 0x00, 0x9B, 0xC6, 0x68,
  0x42, 0xAE, 0xCD, 0xA1, 0x2A, 0xE6, 0xA3, 0x80, 0xE6, 0x28, 0x81, 0xFF, 0x2F,
  0x2D, 0x82, 0xC6, 0x85, 0x28, 0xAA, 0x60, 0x56, 0x58, 0x3A, 0x48, 0xF3
};
uint8_t const C_cy_BrainpoolP512t1_Hp[] = {
  0x3c, 0x4c, 0x9d, 0x05, 0xa9, 0xff, 0x64, 0x50, 0x20, 0x2e, 0x19, 0x40, 0x20,
  0x56, 0xee, 0xcc, 0xa1, 0x6d, 0xaa, 0x5f, 0xd4, 0x2b, 0xff, 0x83, 0x19, 0x48,
  0x6f, 0xd8, 0xd5, 0x89, 0x80, 0x57, 0xe0, 0xc1, 0x9a, 0x77, 0x83, 0x51, 0x4a,
  0x25, 0x53, 0xb7, 0xf9, 0xbc, 0x90, 0x5a, 0xff, 0xd3, 0x79, 0x3f, 0xb1, 0x30,
  0x27, 0x15, 0x79, 0x05, 0x49, 0xad, 0x14, 0x4a, 0x61, 0x58, 0xf2, 0x05
};
uint8_t const C_cy_BrainpoolP512t1_Gx[] = {
  // Gx:
  // 0x640ECE5C12788717B9C1BA06CBC2A6FEBA85842458C56DDE9DB1758D39C0313D82BA51735CDB3EA499AA77A7D6943A64F7A3F25FE26F06B51BAA2696FA9035DA
  0x64, 0x0E, 0xCE, 0x5C, 0x12, 0x78, 0x87, 0x17, 0xB9, 0xC1, 0xBA, 0x06, 0xCB,
  0xC2, 0xA6, 0xFE, 0xBA, 0x85, 0x84, 0x24, 0x58, 0xC5, 0x6D, 0xDE, 0x9D, 0xB1,
  0x75, 0x8D, 0x39, 0xC0, 0x31, 0x3D, 0x82, 0xBA, 0x51, 0x73, 0x5C, 0xDB, 0x3E,
  0xA4, 0x99, 0xAA, 0x77, 0xA7, 0xD6, 0x94, 0x3A, 0x64, 0xF7, 0xA3, 0xF2, 0x5F,
  0xE2, 0x6F, 0x06, 0xB5, 0x1B, 0xAA, 0x26, 0x96, 0xFA, 0x90, 0x35, 0xDA
};
uint8_t const C_cy_BrainpoolP512t1_Gy[] = {
  // Gy:
  // 0x5B534BD595F5AF0FA2C892376C84ACE1BB4E3019B71634C01131159CAE03CEE9D9932184BEEF216BD71DF2DADF86A627306ECFF96DBB8BACE198B61E00F8B332
  0x5B, 0x53, 0x4B, 0xD5, 0x95, 0xF5, 0xAF, 0x0F, 0xA2, 0xC8, 0x92, 0x37, 0x6C,
  0x84, 0xAC, 0xE1, 0xBB, 0x4E, 0x30, 0x19, 0xB7, 0x16, 0x34, 0xC0, 0x11, 0x31,
  0x15, 0x9C, 0xAE, 0x03, 0xCE, 0xE9, 0xD9, 0x93, 0x21, 0x84, 0xBE, 0xEF, 0x21,
  0x6B, 0xD7, 0x1D, 0xF2, 0xDA, 0xDF, 0x86, 0xA6, 0x27, 0x30, 0x6E, 0xCF, 0xF9,
  0x6D, 0xBB, 0x8B, 0xAC, 0xE1, 0x98, 0xB6, 0x1E, 0x00, 0xF8, 0xB3, 0x32
};
uint8_t const C_cy_BrainpoolP512t1_n[] = {
  // n:
  // 0xAADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA70330870553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069
  0xAA, 0xDD, 0x9D, 0xB8, 0xDB, 0xE9, 0xC4, 0x8B, 0x3F, 0xD4, 0xE6, 0xAE, 0x33,
  0xC9, 0xFC, 0x07, 0xCB, 0x30, 0x8D, 0xB3, 0xB3, 0xC9, 0xD2, 0x0E, 0xD6, 0x63,
  0x9C, 0xCA, 0x70, 0x33, 0x08, 0x70, 0x55, 0x3E, 0x5C, 0x41, 0x4C, 0xA9, 0x26,
  0x19, 0x41, 0x86, 0x61, 0x19, 0x7F, 0xAC, 0x10, 0x47, 0x1D, 0xB1, 0xD3, 0x81,
  0x08, 0x5D, 0xDA, 0xDD, 0xB5, 0x87, 0x96, 0x82, 0x9C, 0xA9, 0x00, 0x69
};
uint8_t const C_cy_BrainpoolP512t1_Hn[] = {
  0xa7, 0x94, 0x58, 0x6a, 0x71, 0x84, 0x07, 0xb0, 0x95, 0xdf, 0x1b, 0x4c, 0x19,
  0x4b, 0x2e, 0x56, 0x72, 0x3c, 0x37, 0xa2, 0x2f, 0x16, 0xbb, 0xdf, 0xd7, 0xf9,
  0xcc, 0x26, 0x3b, 0x79, 0x0d, 0xe3, 0xa6, 0xf2, 0x30, 0xc7, 0x2f, 0x02, 0x07,
  0xe8, 0x3e, 0xc6, 0x4b, 0xd0, 0x33, 0xb7, 0x62, 0x7f, 0x08, 0x86, 0xb7, 0x58,
  0x95, 0x28, 0x3d, 0xdd, 0xd2, 0xa3, 0x68, 0x1e, 0xcd, 0xa8, 0x16, 0x71
};

#define C_cy_BrainpoolP512t1_h C_cofactor_1
cx_testvec_weierstrass_t const C_cy_BrainpoolP512t1 = {
  .curve = CY_CURVE_BrainPoolP512T1,
  .bit_size = 512,
  .length = 64,

  .a = C_cy_BrainpoolP512t1_a,
  .b = C_cy_BrainpoolP512t1_b,
  .p = C_cy_BrainpoolP512t1_p,
  .Gx = C_cy_BrainpoolP512t1_Gx,
  .Gy = C_cy_BrainpoolP512t1_Gy,
  .n = C_cy_BrainpoolP512t1_n,
  .h = C_cy_BrainpoolP512t1_h,
  .Hn = C_cy_BrainpoolP512t1_Hn,
  .Hp = C_cy_BrainpoolP512t1_Hp,

};

#endif

#ifdef _STARK_ENABLED
#define Stark_SIZE_u8 32

static uint8_t const C_cy_Stark_a[Stark_SIZE_u8] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
};

static uint8_t const C_cy_Stark_b[Stark_SIZE_u8] = {
  0x06, 0xF2, 0x14, 0x13, 0xEF, 0xBE, 0x40, 0xDE, 0x15, 0x0E, 0x59,
  0x6D, 0x72, 0xF7, 0xA8, 0xC5, 0x60, 0x9A, 0xD2, 0x6C, 0x15, 0xC9,
  0x15, 0xC1, 0xF4, 0xCD, 0xFC, 0xB9, 0x9C, 0xEE, 0x9E, 0x89
};

static uint8_t const C_cy_Stark_p[Stark_SIZE_u8] = {
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
};

static uint8_t const C_cy_Stark_Hp[Stark_SIZE_u8] = {
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
};

static uint8_t const C_cy_Stark_n[Stark_SIZE_u8] = {
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xb7, 0x81, 0x12, 0x6d, 0xca, 0xe7,
  0xb2, 0x32, 0x1e, 0x66, 0xa2, 0x41, 0xad, 0xc6, 0x4d, 0x2f
};

static uint8_t const C_cy_Stark_Hn[Stark_SIZE_u8] = {
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xb7, 0x81, 0x12, 0x6d, 0xca, 0xe7,
  0xb2, 0x32, 0x1e, 0x66, 0xa2, 0x41, 0xad, 0xc6, 0x4d, 0x2f
};

// 01ef15c18599971b7beced415a40f0c7deacfd9b0d1819e03d723d8bc943cfca
// 005668060aa49730b7be4801df46ec62de53ecd11abe43a32873000c36e8dc1f

static uint8_t const C_cy_Stark_Gx[Stark_SIZE_u8] = {
  0x01, 0xef, 0x15, 0xc1, 0x85, 0x99, 0x97, 0x1b, 0x7b, 0xec, 0xed,
  0x41, 0x5a, 0x40, 0xf0, 0xc7, 0xde, 0xac, 0xfd, 0x9b, 0x0d, 0x18,
  0x19, 0xe0, 0x3d, 0x72, 0x3d, 0x8b, 0xc9, 0x43, 0xcf, 0xca
};

/* note: parity=1 for compressed*/
static uint8_t const C_cy_Stark_Gy[Stark_SIZE_u8] = {
  0x00, 0x56, 0x68, 0x06, 0x0a, 0xa4, 0x97, 0x30, 0xb7, 0xbe, 0x48,
  0x01, 0xdf, 0x46, 0xec, 0x62, 0xde, 0x53, 0xec, 0xd1, 0x1a, 0xbe,
  0x43, 0xa3, 0x28, 0x73, 0x00, 0x0c, 0x36, 0xe8, 0xdc, 0x1f
};

#define C_cy_Stark_h C_cofactor_1

static uint8_t const stark_t8[] = { 32, 0, 0, 0, 0, 0, 0, 0 };
static char *const stark_name="Curve Stark";

cx_testvec_weierstrass_t const C_cy_Stark256 = {
  .curve = CY_CURVE_Stark256,
  .bit_size = 251,
  .length = 32,

  .a = C_cy_Stark_a,
  .b = C_cy_Stark_b,
  .p = C_cy_Stark_p,
  .Gx = C_cy_Stark_Gx,
  .Gy = C_cy_Stark_Gy,
  .n = C_cy_Stark_n,
  .h = C_cy_Stark_h,
  .Hp = C_cy_Stark_Hp,
  .Hn = C_cy_Stark_Hn,
  .t8_size=stark_t8,
  .curve_name=stark_name
};

/* Parameters from https://docs.starkware.co/starkex-v4/crypto/stark-curve,
 * conversion using http://magma.maths.usyd.edu.au/calc/ p:=2^251+2^(192)*17+1;
 * a:=1;
 * b:=3141592653589793238462643383279502884197169399375105820974944592307816406665
 * 		6F21413EFBE40DE150E596D72F7A8C5609AD26C15C915C1F4CDFCB99CEE9E89
 * n:=3618502788666131213697322783095070105526743751716087489154079457884512865583
 * Fp:=GF(p);
 * 0800000000000011000000000000000000000000000000000000000000000001
 * E:=EllipticCurve(Fp!a, Fp!b);
 * SEA(E);//checking the order
 * Gx:=874739451078007766457464989774322083649278607533249481151382481072868806602
 * 1ef15c18599971b7beced415a40f0c7deacfd9b0d1819e03d723d8bc943cfca
 * Gy:=
 * 152666792071518830868575557812948353041420400780739481342941381225525861407
 * 5668060aa49730b7be4801df46ec62de53ecd11abe43a32873000c36e8dc1f
 */

#endif //stark


#ifdef _FP_BOLOS_BURRITOS

/* don't modify the order, you can append curve at end of the structure, first modulus are quadratic extensions friendly (-1 is a square)*/
static cx_testvec_weierstrass_t const *const C_cy_allCurves[] = {
  (const cx_testvec_weierstrass_t *)&C_cy_BLS12_381_G1,
  (const cx_testvec_weierstrass_t *)&C_cy_Stark256,
#define _QUADRATIC_FRIENDLY_END 2
  (const cx_testvec_weierstrass_t *)&C_cy_secp256k1,
  (const cx_testvec_weierstrass_t *)&C_cy_secp384r1,
  /* not tested yet */
  (const cx_testvec_weierstrass_t *)&C_cy_secp256r1,
  (const cx_testvec_weierstrass_t *)&C_cy_BrainpoolP256r1,
  (const cx_testvec_weierstrass_t *)&C_cy_BrainpoolP256t1,
  (const cx_testvec_weierstrass_t *)&C_cy_BrainpoolP320r1,
  (const cx_testvec_weierstrass_t *)&C_cy_BrainpoolP320t1,
  (const cx_testvec_weierstrass_t *)&C_cy_BrainpoolP384r1,
  (const cx_testvec_weierstrass_t *)&C_cy_BrainpoolP384t1,
  (const cx_testvec_weierstrass_t *)&C_cy_BrainpoolP512r1,
  (const cx_testvec_weierstrass_t *)&C_cy_BrainpoolP512t1,
};

#else /*!_FP_BOLOS_BURRITOS*/

#ifdef _FP_LIB256K1_BURRITOS
#define _QUADRATIC_FRIENDLY_END 0
static cx_testvec_weierstrass_t const *const C_cy_allCurves[] = {
  (const cx_testvec_weierstrass_t *)&C_cy_secp256k1,
};
#endif/*_FP_LIB256K1_BURRITOS*/

#endif/*_FP_BOLOS_BURRITOS*/

#endif/*CY_EC_CONST_H*/
